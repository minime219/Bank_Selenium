<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="xuxe" ignored="0" name="Test" tests="57" failures="0" timestamp="09 Okt 2018 08:40:07 GMT" time="174.747" errors="0">
  <testcase name="@BeforeTest setUp" time="33.459" classname="main.java.bank.testcases.TestCase11">
    <failure type="org.openqa.selenium.WebDriverException" message="unknown error: cannot determine loading status
from unknown error: cannot determine loading status
from disconnected: received Inspector.detached event
  (Session info: chrome=69.0.3497.100)
  (Driver info: chromedriver=2.40.565498 (ea082db3280dd6843ebfb08a625e3eb905c4f5ab),platform=Windows NT 10.0.17134 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: &amp;apos;3.13.0&amp;apos;, revision: &amp;apos;2f0d292&amp;apos;, time: &amp;apos;2018-06-25T15:32:14.902Z&amp;apos;
System info: host: &amp;apos;XUXE&amp;apos;, ip: &amp;apos;192.168.56.1&amp;apos;, os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;1.8.0_181&amp;apos;
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.40.565498 (ea082db3280dd6..., userDataDir: C:\Users\X240\AppData\Local...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 69.0.3497.100, webStorageEnabled: true}
Session ID: c4c966980f1e2a366a3f83019a653c1f">
      <![CDATA[org.openqa.selenium.WebDriverException: unknown error: cannot determine loading status
from unknown error: cannot determine loading status
from disconnected: received Inspector.detached event
  (Session info: chrome=69.0.3497.100)
  (Driver info: chromedriver=2.40.565498 (ea082db3280dd6843ebfb08a625e3eb905c4f5ab),platform=Windows NT 10.0.17134 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.13.0', revision: '2f0d292', time: '2018-06-25T15:32:14.902Z'
System info: host: 'XUXE', ip: '192.168.56.1', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.40.565498 (ea082db3280dd6..., userDataDir: C:\Users\X240\AppData\Local...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 69.0.3497.100, webStorageEnabled: true}
Session ID: c4c966980f1e2a366a3f83019a653c1f
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:276)
at main.java.bank.testcases.TestCaseObject.setUp(TestCaseObject.java:22)
at main.java.bank.testcases.TestCase11.setUp(TestCase11.java:26)
... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase name="@BeforeTest setUpBefore" time="0.0" classname="main.java.bank.testcases.TestCase2">
    <skipped/>
  </testcase> <!-- @BeforeTest setUpBefore -->
  <testcase name="@BeforeTest setUp" time="0.0" classname="main.java.bank.testcases.TestCase3">
    <skipped/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase name="@BeforeTest setUp" time="0.0" classname="main.java.bank.testcases.TestCase5">
    <skipped/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase name="@BeforeTest setUp" time="0.0" classname="main.java.bank.testcases.TestCase6">
    <skipped/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase name="@BeforeTest setUp" time="0.0" classname="main.java.bank.testcases.TestCase7">
    <skipped/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase name="@BeforeTest setUp" time="0.0" classname="main.java.bank.testcases.TestCase9">
    <skipped/>
  </testcase> <!-- @BeforeTest setUp -->
  <testcase name="@BeforeTest init" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- @BeforeTest init -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@BeforeMethod setUp" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @BeforeMethod setUp -->
  <testcase name="@AfterMethod tearDown" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- @AfterMethod tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.user.balance.BalanceEnquiry">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.user.CustomisedStatement">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.DepositTestCase">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.EditAccount">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.EditCustomerTestCase">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.user.login.LogInAndChangePassword">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.user.ministatement.MiniStatement">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase1">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase11">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase2">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase3">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase5">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase6">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase7">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.TestCase9">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="@AfterTest tearDown" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- @AfterTest tearDown -->
  <testcase name="balanceEnquiry" time="0.0" classname="main.java.bank.testcases.user.balance.BalanceEnquiry">
    <skipped/>
  </testcase> <!-- balanceEnquiry -->
  <testcase name="testLogIn" time="0.0" classname="main.java.bank.testcases.TestCase1">
    <skipped/>
  </testcase> <!-- testLogIn -->
  <testcase name="verifyFundTransfer" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- verifyFundTransfer -->
  <testcase name="verifyRefreshingFundDetails" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- verifyRefreshingFundDetails -->
  <testcase name="verifyCustomizedStatement" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- verifyCustomizedStatement -->
  <testcase name="verifyTransferOnNotAuthorizationAcc" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- verifyTransferOnNotAuthorizationAcc -->
  <testcase name="verifyTransfertoNonExistAcc" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- verifyTransfertoNonExistAcc -->
  <testcase name="verifyTransferToSameAcc" time="0.0" classname="main.java.bank.testcases.user.FundTransferAndStatement">
    <skipped/>
  </testcase> <!-- verifyTransferToSameAcc -->
  <testcase name="verifiedLogin" time="0.0" classname="main.java.bank.testcases.TestCase2">
    <skipped/>
  </testcase> <!-- verifiedLogin -->
  <testcase name="testLogin" time="0.0" classname="main.java.bank.testcases.TestCase3">
    <skipped/>
  </testcase> <!-- testLogin -->
  <testcase name="testLogin" time="0.0" classname="main.java.bank.testcases.TestCase3">
    <skipped/>
  </testcase> <!-- testLogin -->
  <testcase name="testLogin" time="0.0" classname="main.java.bank.testcases.TestCase3">
    <skipped/>
  </testcase> <!-- testLogin -->
  <testcase name="testLogin" time="0.0" classname="main.java.bank.testcases.TestCase3">
    <skipped/>
  </testcase> <!-- testLogin -->
  <testcase name="incorrectOldPasswordOnChangePassword" time="0.0" classname="main.java.bank.testcases.user.login.LogInAndChangePassword">
    <skipped/>
  </testcase> <!-- incorrectOldPasswordOnChangePassword -->
  <testcase name="verifyAfterPasswordChanged" time="0.0" classname="main.java.bank.testcases.user.login.LogInAndChangePassword">
    <skipped/>
  </testcase> <!-- verifyAfterPasswordChanged -->
  <testcase name="verifyLogInChangedCredential" time="0.001" classname="main.java.bank.testcases.user.login.LogInAndChangePassword">
    <skipped/>
  </testcase> <!-- verifyLogInChangedCredential -->
  <testcase name="verifyEditCustomer" time="0.0" classname="main.java.bank.testcases.EditCustomerTestCase">
    <skipped/>
  </testcase> <!-- verifyEditCustomer -->
  <testcase name="verifiedLogin" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- verifiedLogin -->
  <testcase name="verifiedLogin" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- verifiedLogin -->
  <testcase name="verifiedLogin" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- verifiedLogin -->
  <testcase name="verifiedLogin" time="0.0" classname="main.java.bank.testcases.TestCase4">
    <skipped/>
  </testcase> <!-- verifiedLogin -->
  <testcase name="logIn" time="0.0" classname="main.java.bank.testcases.TestCase5">
    <skipped/>
  </testcase> <!-- logIn -->
  <testcase name="verifiedChangePassword" time="0.0" classname="main.java.bank.testcases.TestCase6">
    <skipped/>
  </testcase> <!-- verifiedChangePassword -->
  <testcase name="testLogIn" time="0.0" classname="main.java.bank.testcases.TestCase7">
    <skipped/>
  </testcase> <!-- testLogIn -->
  <testcase name="addNewCustomer" time="0.0" classname="main.java.bank.testcases.TestCase7">
    <skipped/>
  </testcase> <!-- addNewCustomer -->
  <testcase name="testAddNewAccount" time="0.0" classname="main.java.bank.testcases.TestCase8">
    <skipped/>
  </testcase> <!-- testAddNewAccount -->
  <testcase name="deleteAccount" time="0.0" classname="main.java.bank.testcases.TestCase9">
    <skipped/>
  </testcase> <!-- deleteAccount -->
  <testcase name="verifiedBalance" time="0.0" classname="main.java.bank.testcases.TestCase9">
    <skipped/>
  </testcase> <!-- verifiedBalance -->
  <testcase name="verifiedCustomizedStatement" time="0.0" classname="main.java.bank.testcases.TestCase9">
    <skipped/>
  </testcase> <!-- verifiedCustomizedStatement -->
  <testcase name="verifyFundTransfers" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- verifyFundTransfers -->
  <testcase name="reloadedVerifyFundTransfer" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- reloadedVerifyFundTransfer -->
  <testcase name="verifyTransferDetails" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- verifyTransferDetails -->
  <testcase name="verifyTransferWrongAcc" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- verifyTransferWrongAcc -->
  <testcase name="verifyTransferSameAcc" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- verifyTransferSameAcc -->
  <testcase name="verifyTransferFundHigh" time="0.0" classname="main.java.bank.testcases.FundTransferAndCutomizedStatement">
    <skipped/>
  </testcase> <!-- verifyTransferFundHigh -->
  <testcase name="verifyDepositMade" time="0.0" classname="main.java.bank.testcases.DepositTestCase">
    <skipped/>
  </testcase> <!-- verifyDepositMade -->
  <testcase name="verifyDepositRedirect" time="0.0" classname="main.java.bank.testcases.DepositTestCase">
    <skipped/>
  </testcase> <!-- verifyDepositRedirect -->
  <testcase name="verifyEditAccount" time="0.0" classname="main.java.bank.testcases.EditAccount">
    <skipped/>
  </testcase> <!-- verifyEditAccount -->
  <testcase name="verifyLogOut" time="0.0" classname="main.java.bank.testcases.EditAccount">
    <skipped/>
  </testcase> <!-- verifyLogOut -->
  <testcase name="verifyUserCreated" time="0.0" classname="main.java.bank.testcases.EditAccount">
    <skipped/>
  </testcase> <!-- verifyUserCreated -->
  <testcase name="verifyStatementOnWrongAcc" time="0.0" classname="main.java.bank.testcases.user.CustomisedStatement">
    <skipped/>
  </testcase> <!-- verifyStatementOnWrongAcc -->
  <testcase name="verifyOnNotExistAccNo" time="0.0" classname="main.java.bank.testcases.user.CustomisedStatement">
    <skipped/>
  </testcase> <!-- verifyOnNotExistAccNo -->
  <testcase name="verifyOnWrongDateInput" time="0.0" classname="main.java.bank.testcases.user.CustomisedStatement">
    <skipped/>
  </testcase> <!-- verifyOnWrongDateInput -->
  <testcase name="verifyConfirmationMessage" time="0.0" classname="main.java.bank.testcases.TestCase11">
    <skipped/>
  </testcase> <!-- verifyConfirmationMessage -->
  <testcase name="verifyCustomerNotDelete" time="0.0" classname="main.java.bank.testcases.TestCase11">
    <skipped/>
  </testcase> <!-- verifyCustomerNotDelete -->
  <testcase name="deleteCustomer" time="0.0" classname="main.java.bank.testcases.TestCase11">
    <skipped/>
  </testcase> <!-- deleteCustomer -->
  <testcase name="verifyEditNonCustomerID" time="0.0" classname="main.java.bank.testcases.TestCase11">
    <skipped/>
  </testcase> <!-- verifyEditNonCustomerID -->
  <testcase name="verifyDeleteNonExistCustomer" time="0.0" classname="main.java.bank.testcases.TestCase11">
    <skipped/>
  </testcase> <!-- verifyDeleteNonExistCustomer -->
  <testcase name="verifyWithdrawal" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- verifyWithdrawal -->
  <testcase name="verifyWithdrawalOnLowBalance" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- verifyWithdrawalOnLowBalance -->
  <testcase name="verifyMiniStatement" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- verifyMiniStatement -->
  <testcase name="verifyBalaceEnquiry" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- verifyBalaceEnquiry -->
  <testcase name="verifyCustomizedStatement" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- verifyCustomizedStatement -->
  <testcase name="verifyCustomizedStatementWrongDate" time="0.0" classname="main.java.bank.testcases.WithdrawalTestCase">
    <skipped/>
  </testcase> <!-- verifyCustomizedStatementWrongDate -->
  <testcase name="verifyMiniStatement" time="0.0" classname="main.java.bank.testcases.user.ministatement.MiniStatement">
    <skipped/>
  </testcase> <!-- verifyMiniStatement -->
  <testcase name="verifyWrongAcc" time="0.0" classname="main.java.bank.testcases.user.ministatement.MiniStatement">
    <skipped/>
  </testcase> <!-- verifyWrongAcc -->
  <testcase name="verifyNonExistAcc" time="0.0" classname="main.java.bank.testcases.user.ministatement.MiniStatement">
    <skipped/>
  </testcase> <!-- verifyNonExistAcc -->
</testsuite> <!-- Test -->
